#! /usr/bin/env ruby
require 'midilib/sequence'
require 'midilib/consts'
require 'erb'
$: << File.join(File.dirname(__FILE__), '../lib') # TODO gem
require 'mml2smf'
include MIDI
@seq = Sequence.new()

if ARGV.size < 2
  puts "usage: ruby bin/mml2smf input.mml output.mid [-v]"
  exit
end
file = ARGV[0]
mml = File.open(file, 'r'){|fd|fd.read}
if /\.rmml/ === file
  mml = ERB.new(mml).result
end

alltracks = []
mmllines = mml.split(/\n/)
mmllines.each do |line|
  tracks = line.match(/^([A-Z]+) /)
  if tracks
    alltracks += tracks[1].split(//)
  else
    alltracks << 'x'
  end
end
alltracks = alltracks.uniq
if alltracks.size > 1
  mmllinesnew = []
  alltracks.each do |trackc|
    mmllines.each do |line|
      tracks = line.match(/^([A-Z]+) (.*)/)
      if trackc == 'x'
        mmllinesnew << line unless tracks
      elsif tracks
        mmllinesnew << tracks[2] if tracks[1].include?(trackc)
      end
    end
  end
  mmllinesnew << ''
  mml = mmllinesnew.join("\n")
end

@track = nil
@deflen = 4
@defdot = false
@velocity = 90
@nextvelocity = nil
@octave = 4
@nextoctave = 0
@ch = 0
@rest = 0
@staccato = 0

def noteonoff(noteon, noteoff, code = nil)
  if @staccato != 0
    len = @seq.length_to_delta(4.0 / @staccato.abs)
    noteon.delta_time = noteon.delta_time
    if @staccato > 0
      @rest = noteoff.delta_time - len
      noteoff.delta_time = len
    else
      noteoff.delta_time = noteoff.delta_time - len
      @rest = len
    end
  else
    @rest = 0
  end
  @track.events << noteon
  if code
    code = code[1, code.size - 1]
    code.each do |note|
      anote = noteon.clone
      anote.delta_time = 0
      anote.note = note
      @track.events << anote
    end
  end
  @track.events << noteoff
  if code
    code.each do |note|
      anote = noteoff.clone
      anote.delta_time = 0
      anote.note = note
      @track.events << anote
    end
  end
  @nextvelocity = nil
end

@track = Track.new(@seq)
@seq.tracks << @track

mml.gsub(ABNFParser::MMLLine) do |line|
  next if /^#/ === line
  line.chomp!
  line.gsub(ABNFParser::Event) do |ev|
    case ev[0]
    when 't'
      tempo = ev[1..-1].to_i
      @track.events << Tempo.new(Tempo.bpm_to_mpq(tempo))
    when 'v'
      @velocity = ev[1..-1].to_i
    when "'"
      @nextvelocity = ev[1..-1].to_i
    when '@'
      prog = ev[1..-1].to_i
      @track.events << ProgramChange.new(@ch, prog, 0)
    when ';'
      @track = Track.new(@seq)
      @seq.tracks << @track
    when 'p'
      pan = ev[1..-1].to_i
      @track.events << Controller.new(@ch, 10, pan, 0)
    when 'w'
      volume = ev[1..-1].to_i
      @track.events << Controller.new(@ch, 7, volume, 0)
    when 'o'
      @octave = ev[1..-1].to_i
    when /[<>]/
      @octave += ev[0] == '>' ? 1 : -1
    when 'l'
      @deflen = ev[1..-1].to_i
      @defdot = ev[-1] == '.'
    when 'q'
      @staccato = ev[1..-1].to_i
    when 'r' # rest
      if ev.size == 1
        nextrest = @seq.length_to_delta(4.0 / @deflen)
        nextrest = @seq.length_to_delta(4.0 / (@deflen * 2)) if @defdot
      else
        lennum = ev[1..-1].to_i
        nextrest = @seq.length_to_delta(4.0 / lennum)
      end
      @rest += nextrest
    when '{' # code
      code = []
      if ev.index('&') # code and tie
        codes = ev.split('&')
      else
        codes = [ev]
      end
      codelenstr = codes.shift
      codestr, lenstr = codelenstr[1..-1].split('}')
      lenstr = '' unless lenstr
      len = lenstr.to_i
      if len == 0
        len = @deflen
        dot = @defdot
      else
        dot = lenstr[-1] == '.'
      end
      totallen = @seq.length_to_delta(4.0 / len)
      totallen += @seq.length_to_delta(4.0 / (len * 2)) if dot
      note = nil
      codestr.gsub(ABNFParser::Event) do |codeev|
        n, _ = ABNFParser.parsenotestr(codeev, @octave, @deflen, @defdot, @seq)
        note = n unless note
        code << n
      end
      codes.each do |codelenstr|
        _, lenstr = codelenstr[1..-1].split('}')
        lenstr = '' unless lenstr
        len = lenstr.to_i
        if len == 0
          len = @deflen
          dot = @defdot
        else
          dot = lenstr[-1] == '.'
        end
        totallen += @seq.length_to_delta(4.0 / len)
        totallen += @seq.length_to_delta(4.0 / (len * 2)) if dot
      end
      vel = @nextvelocity || @velocity
      noteonoff(NoteOn.new(@ch, note, vel, @rest),
          NoteOff.new(@ch, note, vel, totallen), code)
    else
      if ev[0] == 'c' && ev[1] == 'h' # ch
        @ch = ev[2..-1].to_i - 1
      else
        if ev.index('&') # tie
          notes = ev.split('&')
          notestr = notes.shift
          note, totallen = ABNFParser.parsenotestr(ev, @octave, @deflen,
                                                   @defdot, @seq)
          notes.each do |notestr|
            len = nil
            _, len = ABNFParser.parsenotestr(notestr, @octave, @deflen,
                                             @defdot, @seq)
            totallen += len
          end
        else # single note
          note, totallen = ABNFParser.parsenotestr(ev, @octave, @deflen,
                                                   @defdot, @seq)
        end
        vel = @nextvelocity || @velocity
        noteonoff(NoteOn.new(@ch, note, vel, @rest),
            NoteOff.new(@ch, note, vel, totallen))
      end
    end
  end
end

outputfile = ARGV[1]

File.open(outputfile, 'wb'){|fd| @seq.write(fd)}

if ARGV[2] == '-v'
  @seq.each do |track|
    track.each do |e|
      puts e
    end
  end
end
